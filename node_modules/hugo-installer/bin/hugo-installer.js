#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const objectPath = require("object-path");
const path = require("path");
const yargs = require("yargs");
const index_1 = require("../index");
const argv = yargs
    .version(false)
    .option('version', {
    describe: 'Hugo version to install, or path to package.json value with the version',
    type: 'string',
    required: true,
})
    .option('destination', {
    describe: 'Destination to download the Hugo binary into',
    type: 'string',
    default: 'bin/hugo',
})
    .option('extended', {
    describe: 'Download Hugo extended',
    type: 'boolean',
    default: false,
})
    .strict().argv;
if (isNaN(parseFloat(argv.version))) {
    const packageJson = require(path.resolve(process.cwd(), 'package.json'));
    const packageJsonHugoVersion = objectPath.get(packageJson, argv.version, null);
    if (!packageJsonHugoVersion) {
        console.error(`Cannot find a hugo version in the package.json file at "${argv.version}"`);
        process.exit(1);
    }
    argv.version = packageJsonHugoVersion;
}
const versionString = `${argv.version}${argv.extended ? '_extended' : ''}`;
console.log(`Download hugo binary (version "${versionString}") into "${argv.destination}" ...`);
index_1.installHugo(argv.version, argv.destination)
    .then(() => {
    console.log('Success!');
    process.exit();
})
    .catch((error) => {
    console.error('Error!');
    if (error.toString().indexOf('404') !== -1) {
        console.error(`  -> It seems like the hugo version "${versionString}" does not exist.`);
    }
    console.log('');
    console.dir(error);
    process.exit(1);
});
//# sourceMappingURL=hugo-installer.js.map